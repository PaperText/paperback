networks:
  backend:
  frontend:

services:
  paperback:
    build:
      dockerfile: ./Containerfile # relative to context
      context: .
    command: uvicorn --host 0.0.0.0 --port 7878 --log-level debug --use-colors --log-config ./src/container/uvicorn_log.json --reload --reload-dir /root/paperback/ paperback.app:app
    networks:
      - frontend
      - backend
    depends_on:
      relational_db:
        condition: service_healthy
      graph_db:
        condition: service_started
#      task_broker:
#        condition: service_started
#      - task_backend
    environment:
      SQLALCHEMY_WARN_20: 1

      log_level: "DEBUG"

      auth__db_user: $psql_papertext_username
      auth__db_pass: $psql_papertext_password
      auth__db_host: "relational_db"

      auth__create_root_user: 1
      auth__root_user_password: $psql_root_user_password

      auth__storage_path: "/root/.papertext/storage/auth"
      auth__recreate_keys: 1

      docs__db_host: "graph_db"
      docs__db_user: $neo4j_username
      docs__db_pass: $neo4j_password

      docs__analyzers_titanis_host: $titanis_host

      docs__analyzers_pyexling_host:  $pyexling_host
      docs__analyzers_pyexling_service: $pyexling_service

      # old

      PT__core__host: "0.0.0.0"

      PT__auth__IPstack_api_key: $IPstack_api_key

      PT__auth__root__password: $papertext_auth_root_password

      PT__auth__token__generate_keys: $PT__auth__token__generate_keys

    ports:
      - "7878:7878"
    volumes:
      - "./src/paperback:/root/paperback/src/paperback:z"
      - "./src/container/uvicorn_log.json:/root/paperback/src/container/uvicorn_log.json:z"

# auth

  relational_db:
    image: postgres:14
    networks:
      - backend
    environment:
#      PGUSER: $psql_username
      POSTGRES_USER: $psql_username
      POSTGRES_PASSWORD: $psql_password
      psql_papertext_username: $psql_papertext_username
      psql_papertext_password: $psql_papertext_password
#    user: $psql_username
    volumes:
      - "./src/container/create_auth_user_and_db.sh:/docker-entrypoint-initdb.d/init-dev-user_db.sh:z"
      - "~/.papertext/postgresql:/var/lib/postgresql/data:z"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

# docs

  graph_db:
    image: neo4j:4.3.2
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "/usr/bin/wait-for-it.sh localhost:7687" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      NEO4J_AUTH: "$neo4j_username/$neo4j_password"
      # Raise memory limits
      # NEO4J_dbms_memory_pagecache_size: "1G"
      # NEO4J_dbms.memory.heap.initial_size: "1G"
      # NEO4J_dbms_memory_heap_max__size: "1G"
    ports:
      - "7474:7474" # HTTP
      - "7473:7473" # HTTPS
      - "7687:7687" # BOLT
    volumes:
      - "~/.papertext/neo4j/conf:/conf:z"
      - "~/.papertext/neo4j/data:/data:z"
      - "~/.papertext/neo4j/import:/import:z"
      - "~/.papertext/neo4j/logs:/logs:z"
      - "~/.papertext/neo4j/plugins:/plugins:z"

#  task_broker:
#    image: rabbitmq:3-management
#    networks:
#      - backend
##    hostname: "rabbitmq"
#    volumes:
#      - "../../rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:z"
#    ports:
#      - "5672:5672" # default port
#      - "15672:15672" # web interface
